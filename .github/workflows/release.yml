name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-and-upload:
    name: Build and Upload
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
            ext: ''
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
            ext: ''
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-aarch64
            ext: ''
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
            ext: '.exe'

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Build release
        run: cd src-tauri && cargo build --release --target ${{ matrix.target }} --bins

      - name: Create archive (Unix)
        if: runner.os != 'Windows'
        run: |
          cd src-tauri/target/${{ matrix.target }}/release
          tar czf envmesh-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz \
            envmesh-daemon envmesh-cli
          mv envmesh-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz ../../../../

      - name: Create archive (Windows)
        if: runner.os == 'Windows'
        run: |
          cd src-tauri/target/${{ matrix.target }}/release
          7z a envmesh-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip `
            envmesh-daemon.exe envmesh-cli.exe
          mv envmesh-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip ../../../../

      - name: Upload Release Asset (Unix)
        if: runner.os != 'Windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./envmesh-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz
          asset_name: envmesh-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Asset (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./envmesh-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip
          asset_name: envmesh-${{ needs.create-release.outputs.version }}-${{ matrix.name }}.zip
          asset_content_type: application/zip
